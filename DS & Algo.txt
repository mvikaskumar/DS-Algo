*Searching.
*Linear Search---

import java.util.Scanner;
public class Main {

//In LinearSearch we have to travel in array from strarting to end.
//Time complexity of LS will be O(n).
 
     static int linearSearch(int arr[],int n,int key){       //if we ll pass arr in palce of arr[] then required array but found int arror will occure.
        for(int i=0;i<n;i++){   // if we ll not not make this method static then not static method cant be called from static method error will occure.
            if(arr[i]==key){
                return i;
            }
        }
        return -1;
    }

    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();

        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int key=sc.nextInt();
        System.out.println(linearSearch(arr,n,key));
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------
//Searchng.
* Binary Search---
// for Binary search array must be sorted.
// Time complexity in binary search is O(log n base 2).

import java.util.Scanner;
public class Main {
    static int BinarySearch(int arr[], int n, int key){
        int l=0; //l for lowest element or starting point.
        int h=n; //h for highest element of ending point.
        int mid=0;
        while(l<=h){
            mid=(l+h)/2;
            if(arr[mid]==key){
                return mid;
            }
            else if(arr[mid]>key){ // ie element must be present in first half or array.
                h=mid-1;
            }
            else{                  // ie element must be present in second half of array.
                l=mid+1;
            }
        }
        return -1;
    }
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int key=sc.nextInt();
        System.out.println(BinarySearch(arr,n,key));
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Sorting
// * Selcetion sort-> Find the number in array as required and swap it with first element.
// Time complexity of selection Sort is O(n^2).

import java.util.Scanner;
public class Main {
    public static void selectionSort(int arr[], int n){
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(arr[j]<arr[i]){
                    int temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }
         for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
    }
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]= new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        selectionSort(arr,n);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
*Sorting
// * Bubble Sort->Reapetedly swap two adjacent element if they are in wrong order.
// Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order.
//  This algorithm is not suitable for large data sets as its average and worst-case time complexity is quite high.
// Time complexcity of bubble sort will be O(n^2).

import java.util.Scanner;
public class Main {
    public static void bubbleSort(int arr[], int n){
        int counter=1;
        while(counter<n-1){
            for(int i=0;i<n-counter;i++){
            if(arr[i]>arr[i+1]){
                int temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
            }
        }
        counter++;
        }
         for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
    }
    public static void main(String args[]) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]= new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        bubbleSort(arr,n);
    }
}
